let sql,env;_448‍.x([["executeProcedure",()=>executeProcedure],["executeAddItemProcedure",()=>executeAddItemProcedure],["executeDeleteItemProcedure",()=>executeDeleteItemProcedure],["executeQuery",()=>executeQuery]]);_448‍.w("mysql",[["default",["sql"],function(v){sql=v}]]);_448‍.w("process",[["env",["env"],function(v){env=v}]]);


var con = sql.createConnection({
  host: env.SQL_HOST,
  user: env.SQL_USERNAME,
  password: env.SQL_PASSWORD,
  database: env.SQL_DATABASE
});

con.connect(function (err) {
  if (err) throw err;
  console.log("Connected!");
});

/**
 * @param {string} procedure
 * @param {object} [params]
 */


       function executeProcedure(procedure, cb) {
  return con.query(`CALL ${procedure}()`, true, cb);
}

       function executeAddItemProcedure(procedure, params, cb) {
  _448‍.g.console.log(JSON.stringify(params))
  return con.query(`CALL ${procedure} ('${params.ArName}',
                                       '${params.EnName}',
                                       '${params.ArDescription}',
                                       '${params.EnDescription}',
                                       '${params.Address}',
                                       '${params.OwnerName}',
                                       '${params.PhoneNumber}',
                                       '${params.Type}'
                                       )`, true, cb);
}

       function executeDeleteItemProcedure(procedure, id, cb) {
  _448‍.g.console.log('at sql' + id)
  return con.query(`CALL ${procedure} (${id})`, true, cb);
}
/**
 * @param {string} query
 * @param {object} [params]
 */
       async function executeQuery() {
  _448‍.g.console.log(con);
  var data = con.query('SELECT 1 + 1 AS solution', function (error, results, fields) {
    if (error) throw error;
    _448‍.g.console.log('The solution is: ', results[0].solution);
  });
  return data;
}